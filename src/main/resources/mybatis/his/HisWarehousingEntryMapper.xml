<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.his.entry.mapper.HisWarehousingEntryMapper">

    <resultMap type="HisWarehousingEntry" id="HisWarehousingEntryResult">
        <result property="entId" column="ent_id"/>
        <result property="userId" column="user_id"/>
        <result property="userName" column="user_name"/>
        <result property="entDocNum" column="ent_doc_num"/>
        <result property="entDate" column="ent_date"/>
    </resultMap>

    <resultMap id="HisWarehousingEntryHisEntrySchedulesResult" type="HisWarehousingEntry"
               extends="HisWarehousingEntryResult">
        <collection property="hisEntrySchedulesList" notNullColumn="sub_ent_sch_id" javaType="java.util.List"
                    resultMap="HisEntrySchedulesResult"/>
    </resultMap>

    <resultMap type="HisEntrySchedules" id="HisEntrySchedulesResult">
        <result property="entSchId" column="sub_ent_sch_id"/>
        <result property="entId" column="sub_ent_id"/>
        <result property="catId" column="sub_cat_id"/>
        <result property="entSchBatchNumber" column="sub_ent_sch_batch_number"/>
        <result property="entSchProdDate" column="sub_ent_sch_prod_date"/>
        <result property="entSchValidTo" column="sub_ent_sch_valid_to"/>
        <result property="entSchUnitPrice" column="sub_ent_sch_unit_price"/>
        <result property="entSchNum" column="sub_ent_sch_num"/>
    </resultMap>

    <sql id="selectHisWarehousingEntryVo">
        select ent_id, user_id, ent_doc_num, ent_date
        from his_warehousing_entry
    </sql>

    <select id="selectHisWarehousingEntryList" parameterType="HisWarehousingEntry"
            resultMap="HisWarehousingEntryResult">
        select we.ent_id, we.user_id, we.ent_doc_num, we.ent_date, su.user_name
        from his_warehousing_entry we
        left join sys_user su on we.user_id = su.user_id
        <where>
            <if test="userId != null ">and su.user_id = #{userId}</if>
            <if test="userName != null and userName != ''">and su.user_name LIKE CONCAT('%', #{userName}, '%')</if>
            <if test="entDocNum != null  and entDocNum != ''">and ent_doc_num LIKE CONCAT('%', #{entDocNum}, '%')</if>
            <if test="entDate != null ">and ent_date = #{entDate}</if>
        </where>
    </select>

    <select id="selectHisWarehousingEntryByEntId" parameterType="Long"
            resultMap="HisWarehousingEntryHisEntrySchedulesResult">
        select a.ent_id,
               a.user_id,
               a.ent_doc_num,
               a.ent_date,
               b.ent_sch_id           as sub_ent_sch_id,
               b.ent_id               as sub_ent_id,
               b.cat_id               as sub_cat_id,
               b.ent_sch_batch_number as sub_ent_sch_batch_number,
               b.ent_sch_prod_date    as sub_ent_sch_prod_date,
               b.ent_sch_valid_to     as sub_ent_sch_valid_to,
               b.ent_sch_unit_price   as sub_ent_sch_unit_price,
               b.ent_sch_num          as sub_ent_sch_num
        from his_warehousing_entry a
                 left join his_entry_schedules b on b.ent_id = a.ent_id
        where a.ent_id = #{entId}
    </select>

    <insert id="insertHisWarehousingEntry" parameterType="HisWarehousingEntry" useGeneratedKeys="true"
            keyProperty="entId">
        insert into his_warehousing_entry
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="userId != null">user_id,</if>
            <if test="entDocNum != null">ent_doc_num,</if>
            <if test="entDate != null">ent_date,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="userId != null">#{userId},</if>
            <if test="entDocNum != null">#{entDocNum},</if>
            <if test="entDate != null">#{entDate},</if>
        </trim>
    </insert>

    <update id="updateHisWarehousingEntry" parameterType="HisWarehousingEntry">
        update his_warehousing_entry
        <trim prefix="SET" suffixOverrides=",">
            <if test="userId != null">user_id = #{userId},</if>
            <if test="entDocNum != null">ent_doc_num = #{entDocNum},</if>
            <if test="entDate != null">ent_date = #{entDate},</if>
        </trim>
        where ent_id = #{entId}
    </update>

    <delete id="deleteHisWarehousingEntryByEntId" parameterType="Long">
        delete
        from his_warehousing_entry
        where ent_id = #{entId}
    </delete>

    <delete id="deleteHisWarehousingEntryByEntIds" parameterType="String">
        delete from his_warehousing_entry where ent_id in
        <foreach item="entId" collection="array" open="(" separator="," close=")">
            #{entId}
        </foreach>
    </delete>

    <delete id="deleteHisEntrySchedulesByEntIds" parameterType="String">
        delete from his_entry_schedules where ent_id in
        <foreach item="entId" collection="array" open="(" separator="," close=")">
            #{entId}
        </foreach>
    </delete>

    <delete id="deleteHisEntrySchedulesByEntId" parameterType="Long">
        delete
        from his_entry_schedules
        where ent_id = #{entId}
    </delete>

    <insert id="batchHisEntrySchedules">
        insert into his_entry_schedules( ent_sch_id, ent_id, cat_id, ent_sch_batch_number, ent_sch_prod_date,
        ent_sch_valid_to, ent_sch_unit_price, ent_sch_num) values
        <foreach item="item" index="index" collection="list" separator=",">
            ( #{item.entSchId}, #{item.entId}, #{item.catId}, #{item.entSchBatchNumber}, #{item.entSchProdDate},
            #{item.entSchValidTo}, #{item.entSchUnitPrice}, #{item.entSchNum})
        </foreach>
    </insert>

</mapper>